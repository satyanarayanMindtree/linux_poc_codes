===================================================================================================================================================
>> Class Access Modifiers
> public Members  
    A public member is accessible from anywhere outside the class but within a program.

> private Members 
    A private member variable or function cannot be accessed, or even viewed from outside the class. Only the class and friend functions can access 
    private members. By default all the members of a class would be private.
    
> protected Members 
    A protected member variable or function is very similar to a private member but it provided one additional benefit that they can be accessed in 
    child classes which are called derived classes.
===================================================================================================================================================

===================================================================================================================================================
>> Constructor & Destructor
> Class Constructor
    A class constructor is a special member function of a class that is executed whenever we create new objects of that class. A constructor will have 
    exact same name as the class and it does not have any return type at all, not even void. Constructors can be very useful for setting initial values 
    for certain member variables.
    > Parameterized Constructor
        A default constructor does not have any parameter, but if you need, a constructor can have parameters. This helps you to assign initial value to 
        an object at the time of its creation.
        
> Copy Constructor
    The copy constructor is a constructor which creates an object by initializing it with an object of the same class, which has been created previously. 
    The copy constructor is used to:
         Initialize one object from another of the same type.
         Copy an object to pass it as an argument to a function.
         Copy an object to return it from a function.
    If a copy constructor is not defined in a class, the compiler itself defines one.If the class has pointer variables and has some dynamic memory 
    allocations, then it is a must to have a copy constructor.
        
> Class Destructor
    A destructor is a special member function of a class that is executed whenever an object of it's class goes out of scope or whenever the delete 
    expression is applied to a pointer to the object of that class. A destructor will have exact same name as the class prefixed with a tilde (~)
    and it can neither return a value nor can it take any parameters. Destructor can be very useful for releasing resources before coming out of the 
    program like closing files, releasing memories etc.
===================================================================================================================================================

===================================================================================================================================================    
>> Friend Functions
    A friend function of a class is defined outside that class' scope but it has the right to access all private and protected members of the class. 
    Even though the prototypes for friend functions appear in the class definition, friends are not member functions. A friend can be a function, 
    function template, or member function, or a class or class template, in which case the entire class and all of its members are friends. To declare 
    a function as a friend of a class, precede the function prototype in the class definition with keyword friend.
===================================================================================================================================================

===================================================================================================================================================
>> Static Members of a Class
    We can define class members static using static keyword. When we declare a member of a class as static it means no matter how many objects of the 
    class are created, there is only one copy of the static member. A static member is shared by all objects of the class. All static data is initialized
    to zero when the first object is created, if no other initialization is present. We can't put it in the class definition but it can be initialized 
    outside the class as done in the following example by redeclaring the static variable, using the scope resolution operator :: to identify which class 
    it belongs to.
===================================================================================================================================================

===================================================================================================================================================
>> Static Function Members
    By declaring a function member as static, you make it independent of any particular object of the class. A static member function can be called 
    even if no objects of the class exist and the static functions are accessed using only the class name and the scope resolution operator ::.
    A static member function can only access static data member, other static member functions and any other functions from outside the class. Static 
    member functions have a class scope and they do not have access to the this pointer of the class. You could use a static member function to determine 
    whether some objects of the class have been created or not.
===================================================================================================================================================

===================================================================================================================================================
>> Inheritance
> Base & Derived Classes

    class derived-class: access-specifier base-class
    Where access-specifier is one of public, protected, or private, and base-class is the name of a previously defined class. If the access-specifier 
    is not used, then it is private by default.
    
    Access              public      protected       private
    Same class          yes         yes             yes
    Derived classes     yes         yes             no
    Outside classes     yes         no              no
    
    A derived class inherits all base class methods with the following exceptions:
     Constructors, destructors and copy constructors of the base class.
     Overloaded operators of the base class.
     The friend functions of the base class

> Type of Inheritance
    When deriving a class from a base class, the base class may be inherited through public, protected or private inheritance. The type of inheritance is
    specified by the access-specifier as explained above.
    while using different type of inheritance, following rules are applied:
    
    > Public Inheritance: 
        When deriving a class from a public base class, public members of the base class become public members of the derived class and protected members 
        of the base class become protected members of the derived class. A base class's private members are never accessible directly from a derived class, 
        but can be accessed through calls to the public and protected members of the base class.
    > Protected Inheritance: 
        When deriving from a protected base class, public and protected members of the base class become protected members of the derived class.
    > Private Inheritance: 
        When deriving from class, public and protected members of the become private members of the derived class.
        
> Multiple Inheritance
    class derived-class: access baseA, access baseB....
===================================================================================================================================================

===================================================================================================================================================
>> OVERLOADING
> Function Overloading
    You can have multiple definitions for the same function name in the same scope.The definition of the function must differ from each other by the 
    types and/or the number of arguments in the argument list. You cannot overload function declarations that differ only by return type.
    
> Operators Overloading
    Overloaded operators are functions with special names the keyword operator followed by the symbol for the operator being defined. Like any other 
    function, an overloaded operator has a return type and a parameter list.
    Box operator+(const Box&);
===================================================================================================================================================

===================================================================================================================================================
>> Polymorphism
    example::
        #include <iostream>
        using namespace std;
        class Shape {
            protected:
                int width, height;
            public:
                Shape( int a=0, int b=0)
                {
                    width = a;
                    height = b;
                }
                
                int area()
                {
                    cout << "Parent class area :" <<endl;
                    return 0;
                }
        };
        class Rectangle: public Shape{
            public:
                Rectangle( int a=0, int b=0):Shape(a, b) { }
                int area ()
                {
                    cout << "Rectangle class area :" <<endl;
                    return (width * height);
                }
        };
        class Triangle: public Shape{
            public:
                Triangle( int a=0, int b=0):Shape(a, b) { }
                int area ()
                {
                    cout << "Triangle class area :" <<endl;
                    return (width * height / 2);
                }
        };
        // Main function for the program
        int main( )
        {
            Shape *shape;
            Rectangle rec(10,7);
            Triangle
            tri(10,5);
            
            // store the address of Rectangle
            shape = &rec;
            // call rectangle area.
            shape->area();
            
            // store the address of Triangle
            shape = &tri;
            // call triangle area.
            shape->area();
            
            rec.area();
            
            tri.area();
            
            
            return 0;
        }
        
        ouput:: 
            Parent class area :
            Parent class area :
            Rectangle class area :
            Triangle class area :
            The reason for the incorrect output is that the call of the function area() is being set once by the compiler as the version defined in the 
            base class. This is called static resolution of the function call, or static linkage - the function call is fixed before the program is 
            executed. This is also sometimes called early binding because the area() function is set during the compilation of the program.

        example2:: 
            But now, let's make a slight modification in our program and precede the declaration of area() in the Shape class with the keyword virtual 
            so that it looks like this:
            class Shape {
                protected:
                    int width, height;
                public:
                    Shape( int a=0, int b=0)
                    {
                        width = a;
                        height = b;
                    }
                    
                    virtual int area()
                    {
                        cout << "Parent class area :" <<endl;
                        return 0;
                    }
            };
        ouput:: 
            Rectangle class area :
            Triangle class area :
            Rectangle class area :
            Triangle class area :
            This time, the compiler looks at the contents of the pointer instead of its type. Hence, since addresses of objects of tri and rec classes 
            are stored in  *shape the respective area() function is called.
            
===================================================================================================================================================

===================================================================================================================================================
>> Virtual Function
    A virtual function is a function in a base class that is declared using the keyword virtual. Defining in a base class a virtual function, with another 
    version in a derived class, signals to the compiler that we don't want static linkage for this function. What we do want is the selection of the 
    function to be called at any given point in the program to be based on the kind of object for which it is called. This sort of operation is referred 
    to as dynamic linkage, or late binding.
    
> Pure virtual function
    It is possible that you want to include a virtual function in a base class so that it may be redefined in a derived class to suit the objects of that 
    class, but that there is no meaningful definition you could give for the function in the base class.
    example::
        class Shape {
            protected:
                int width, height;
            public:
                Shape( int a=0, int b=0)
                {
                    width = a;
                    height = b;
                }
                
                // pure virtual function
                virtual int area() = 0;
        };
===================================================================================================================================================

===================================================================================================================================================
>> Namespace
    A namespace is designed to overcome this difficulty and is used as additional information to differentiate similar functions, classes, variables etc. 
    with the same name available in different libraries. Using namespace, you can define the context in which names are defined. In essence, a namespace 
    defines a scope.
    A namespace definition begins with the keyword namespace followed by the namespace name as follows:
    namespace namespace_name {
        // code declarations
    }
    To call the namespace-enabled version of either function or variable, prepend (::) the namespace name as follows:
    namespace_name::code; // code could be variable or function.
    example::
    #include <iostream>
    using namespace std;
    // first name space
    namespace first_space{
        void func(){
            cout << "Inside first_space" << endl;
        }
    }
    // second name space
    namespace second_space{
        void func(){
            cout << "Inside second_space" << endl;
        }
    }
    using namespace first_space;
    int main ()
    {
        // This calls function from first name space.
        func();
        second_space::func();
        return 0;
    }
    output:: 
        Inside first_space
        Inside second_space

> Discontiguous Namespaces
    example::
        #include <iostream>
        using namespace std;
        // first name space
        namespace second_space{
            void func_1(){
                cout << "Inside first_space" << endl;
            }
        }
        // second name space
        namespace second_space{
            void func(){
                cout << "Inside second_space" << endl;
            }
        }
        using namespace second_space;
        int main ()
        {
            // This calls function from first name space.
            func_1();
            second_space::func();
            return 0;
        }
    output::
        Inside first_space
        Inside second_space

> Nested Namespace
    example::
        namespace namespace_name1 {
            // code declarations
            namespace namespace_name2 {
                // code declarations
            }
        }
        
===================================================================================================================================================